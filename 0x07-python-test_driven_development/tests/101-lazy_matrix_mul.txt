Usage Guide for matrix_mul Module
=================================

Usage of matrix multiplication function `matrix_mul(m_a, m_b)`

Usage
=====

`matrix_mul()` fuction returns a new matrix. A product
of multiplication of `m_a` by `m_b`.

::

    >>> lazy_matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[7, 10], [15, 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13, 16]]

The function also works with floats numbers.

::

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]


If minimum of two arguments is not provided. Raise TypeError.

::

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
        TypeError: lazy_matrix_mul() missing 1 required positional arguments:'m_a'

::
    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
        TypeError: matrix_mul() missing 2 required positional arguments:
            'm_a' and 'm_b'

ValueErrors
===========

If two matrices cannot be multiplied. raised a ValueError.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5],
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
        ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

If `m_a` and `m_b` is empty. Raise a ValueError.

::
	
	>>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
	Traceback (most recent call last):
	    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

::

	>>> print(lazy_matrix_mul([[]], []))
	Traceback (most recent call last):
	    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Invalid Matrices
================

If parameters `m_a` and `m_b` are not a lists. raise a TypeError.

::

	>>> print(lazy_matrix_mul("not a list", [[1, 2]]))
        Traceback (most recent call last):
            ValueError: Scala operands are not allowed, use '*' instead

::

	>>> print(lazy_matrix_mul([[1, 2]], "also not a list"))
        Traceback (most recent call last):
            ValueError: Scala operands are not allowed, use '*' instead

::

	>>> print(lazy_matrix_mul("not a list", "also not a list"))
        Traceback (most recent call last):
            ValueError: Scala operands are not allowed, use '*' instead

If either parameter is None: raised TypeError.


::

	>>> print(lazy_matrix_mul(None, None))
        Traceback (most recent call last):
            TypeError: Object arrays are not currently supported

They must be list of lists: Not just any list.

::

	>>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
        Traceback (most recent call last):
            ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

::

	>>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
	[11]
::

	>>> print(lazy_matrix_mul([1, 2], [3, 4]))
	[11]

The list of list must contain integers of floats

::

	>>> print(lazy_matrix_mul([[1,"non-number"]], [[3, 4]]))
        Traceback (most recent call last):
	    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)
::

	>>> print(lazy_matrix_mul([[1, 6], [7, 8]], [[5, "1"], [7, 8]]))
        Traceback (most recent call last):
            TypeError: invalid data type for einsum

::

	>>> print(lazy_matrix_mul([[8, 'non-number']], [[{"a": 6}, 8.8]]))
        Traceback (most recent call last):
            TypeError: Object arrays are not currently supported

Lastly, the length of all rows in matrix `m_a` and `m_b` should be 
equivalent. Otherwise, raise TypeError.

::

	>>> m_a = [
	... [1, 2],
	... [3, 4, 5]
	... ]
	>>> m_b = [
	... [1, 2],
	... [3, 4]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	    ValueError: setting an array element with a sequence.

::

	>>> m_a = [
        ... [1, 2],
        ... [3, 4],
        ... ]
        >>> m_b = [
        ... [1, 2],
        ... [3, 4, 5]
        ... ]
        >>> print(lazy_matrix_mul(m_a, m_b))
        Traceback (most recent call last):
            ValueError: setting an array element with a sequence.

::

	>>> m_a = [
        ... [1, 2],
        ... [3, 4, 5]
        ... ]
        >>> m_b = m_a
        >>> print(lazy_matrix_mul(m_a, m_b))
        Traceback (most recent call last):
            ValueError: setting an array element with a sequence.
